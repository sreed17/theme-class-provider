{"version":3,"file":"index.mjs","sources":["../src/ThemeClassContext.ts","../src/utils.ts","../src/themeClassContextReducer.ts","../src/ThemeClassContextProvider.tsx","../src/useThemeClassContext.ts"],"sourcesContent":["import { createContext } from \"react\";\nimport { IThemeClassContext } from \"./theme-class-provider.types\";\n\nconst ThemeClassContext = createContext<IThemeClassContext | null>(null);\n\nexport default ThemeClassContext;\n","/**\n * @file Provides utility functions for managing theme class actions and persistent data.\n * @description This module contains functions for validating theme class actions, managing persistent theme data in local storage, and handling related operations.\n */\n\nimport {\n    IThemeClassActionType,\n    IThemePersistantDTO,\n    THEME_CLASS_ACTIONS,\n} from \"./theme-class-provider.types\";\n\n/**\n * Checks if the provided argument is a valid theme class action type.\n * @param arg The argument to check.\n * @returns A boolean indicating whether the argument is a valid theme class action type.\n */\nexport function isThemeClassActionType(\n    arg: unknown\n): arg is IThemeClassActionType {\n    if (typeof arg !== \"string\") {\n        return false;\n    }\n    return THEME_CLASS_ACTIONS.includes(arg as IThemeClassActionType);\n}\n\n/**\n * Checks if the provided argument is a valid theme class list.\n * @param arg The argument to check.\n * @returns A boolean indicating whether the argument is a valid theme class list.\n */\nexport function isThemeClassList(arg: unknown): arg is string[] {\n    if (!Array.isArray(arg)) {\n        return false;\n    }\n    return arg.every((class_value) => typeof class_value === \"string\");\n}\n\n/**\n * Checks if the provided argument is a valid current theme index.\n * @param arg The argument to check.\n * @param max The maximum allowed index.\n * @returns A boolean indicating whether the argument is a valid current theme index.\n */\nexport function isValidCurrentThemeIndex(arg: unknown, max: number): boolean {\n    if (typeof arg !== \"number\") {\n        return false;\n    }\n    return arg >= 0 && arg < max;\n}\n\n/**\n * Checks if the provided argument is a valid theme persistent data object.\n * @param arg The argument to check.\n * @returns A boolean indicating whether the argument is a valid theme persistent data object.\n */\nexport function isThemePersistantDTO(arg: unknown): arg is IThemePersistantDTO {\n    if (!arg || typeof arg !== \"object\") {\n        return false;\n    }\n    return (\n        arg != null &&\n        typeof arg === \"object\" &&\n        \"theme_classes\" in arg &&\n        isThemeClassList(arg.theme_classes) &&\n        \"current\" in arg &&\n        isValidCurrentThemeIndex(arg.current, arg.theme_classes.length)\n    );\n}\n\n/**\n * Checks if the payload for a given action type is valid.\n * @param type The type of the action.\n * @param payload The payload of the action.\n * @returns A boolean indicating whether the payload is valid for the given action type.\n */\nexport function isValidPayload(\n    type: IThemeClassActionType,\n    payload: unknown\n): boolean {\n    switch (type) {\n        case \"SET_CURRENT_THEME_CLASS\": {\n            return typeof payload === \"string\";\n        }\n        case \"SET_LOADING_STATE\": {\n            return typeof payload === \"boolean\";\n        }\n\n        case \"SET_THEME_CLASSES\": {\n            return isThemeClassList(payload);\n        }\n        case \"TOGGLE_THEME\": {\n            return payload == null || payload === undefined;\n        }\n        case \"LOAD_STATE\": {\n            return isThemePersistantDTO(payload);\n        }\n        case \"SET_DEFAULT\": {\n            return typeof payload === \"string\";\n        }\n        case \"FLAG_PERSISTED_DATA_LOAD\": {\n            return typeof payload === \"boolean\";\n        }\n    }\n    return false;\n}\n\n/**\n * Retrieves persisted theme data from local storage.\n * @param key The key under which the theme data is stored.\n * @returns The retrieved theme data if found, otherwise null.\n */\nexport function getPersistedThemeData(key: string): IThemePersistantDTO | null {\n    try {\n        const serializedData = localStorage.getItem(key);\n        if (!serializedData) {\n            return null;\n        }\n\n        const data = JSON.parse(serializedData);\n        return isThemePersistantDTO(data) ? data : null;\n    } catch (error) {\n        console.error(\"Error retrieving persisted theme data:\", error);\n        return null;\n    }\n}\n\n/**\n * Sets persisted theme data in local storage.\n * @param key The key under which to store the theme data.\n * @param value The theme data to store.\n */\nexport function setPersistedThemeData(\n    key: string,\n    value: IThemePersistantDTO\n): void {\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n        console.error(\"Error setting persisted theme data:\", error);\n    }\n}\n\n/**\n * Clears persisted theme data from local storage.\n * @param key The key under which the theme data is stored.\n */\nexport function clearPersistedThemeData(key: string): void {\n    try {\n        localStorage.removeItem(key);\n    } catch (error) {\n        console.error(\"Error clearing persisted theme data:\", error);\n    }\n}\n\n/**\n * Sets current theme class to the document.documentElement.\n * This is set as the default behaviour when no onChange is provided by the user\n */\n\nexport function updateThemeClassOfDocumentElement(\n    current: number,\n    previous: number | null,\n    theme_classes: string[]\n) {\n    try {\n        if (previous !== null) {\n            const previous_class = theme_classes[previous];\n            document.documentElement.classList.remove(previous_class);\n        }\n        const current_class = theme_classes[current];\n        document.documentElement.classList.add(current_class);\n    } catch (err) {\n        console.error(\"Error changing the document theme class\");\n    }\n}\n\n/**\n * Compute the non negative modulo operation\n * @param n - The divident\n * @param m - The divisor\n * @returns - Non-negative remainder when n is dividen by m\n */\nexport function mod(n: number, m: number) {\n    return ((n % m) + m) % m;\n}\n","/**\n * @file themeClassContextReducer.ts\n * @description Reducer function for managing state in the theme class context.\n */\n\nimport { produce } from \"immer\";\nimport {\n    IThemeClassAction,\n    IThemeClassState,\n} from \"./theme-class-provider.types\";\nimport { isValidPayload, mod } from \"./utils\";\n\n/**\n * Reducer function for managing state in the theme class context.\n * @param state The current state of the theme class context.\n * @param action The action dispatched to update the state.\n * @returns The new state after applying the action.\n */\nfunction themeClassContextReducer(\n    state: IThemeClassState,\n    action: IThemeClassAction\n) {\n    return produce(state, (draft) => {\n        // Type checking the action\n        if (!isValidPayload(action.type, action.payload)) {\n            const err = new Error(\n                \"Type Error: Invalid ThemeClassAction type, Check the dispatched action object\"\n            );\n            draft.error = err;\n            return draft;\n        }\n\n        const action_type = action.type;\n\n        // Reset error at each call\n        draft.error = null;\n        // Process action\n        switch (action_type) {\n            case \"SET_LOADING_STATE\": {\n                draft.is_loading = action.payload;\n                break;\n            }\n            /**\n             * Set the theme_classes list and resets to the default theme-class\n             * This will reset the current, previous states\n             */\n            case \"SET_THEME_CLASSES\": {\n                if (action.payload.length === 0) {\n                    const err = new Error(\n                        \"Value Error: Theme-classes list must not be empty\"\n                    );\n                    draft.error = err;\n                    return draft;\n                }\n                draft.theme_classes = action.payload;\n                draft.previous = null;\n                draft.current = 0;\n                break;\n            }\n            /**\n             * Set the current theme to the given arg\n             */\n            case \"SET_CURRENT_THEME_CLASS\": {\n                const theme_index = draft.theme_classes.indexOf(action.payload);\n\n                if (theme_index === -1) {\n                    const err = new Error(\n                        \"Invalid Value Error: Can't set to the proveded theme-class since it does not exist in the theme-classes list\"\n                    );\n                    draft.error = err;\n                    break;\n                }\n                draft.previous = draft.current;\n                draft.current = theme_index;\n                break;\n            }\n            /**\n             * Cycle through the theme_classes list\n             */\n            case \"TOGGLE_THEME\": {\n                const n_themes = draft.theme_classes.length;\n                const current = draft.current;\n                draft.previous = current;\n                const next_theme = current + 1 >= n_themes ? 0 : current + 1;\n                draft.current = next_theme;\n                break;\n            }\n            /**\n             * Load a previous state\n             */\n            case \"LOAD_STATE\": {\n                const { current, theme_classes } = action.payload;\n                draft.previous = null;\n                draft.current = current;\n                draft.theme_classes = theme_classes;\n                break;\n            }\n            case \"SET_DEFAULT\": {\n                // Find index of the provided theme class\n                const theme_index = draft.theme_classes.indexOf(action.payload);\n\n                // Check if the theme class exists in the list\n                if (theme_index === -1) {\n                    const err = new Error(\n                        \"Invalid Value Error: Can't set to the proveded theme-class since it does not exist in the theme-classes list\"\n                    );\n                    draft.error = err;\n                    break;\n                }\n\n                // Reorder theme classes to set the provided theme class as default (zero indexed)\n                const theme_classes: string[] = [];\n                const n = draft.theme_classes.length;\n\n                for (let i = 0; i < n; i++) {\n                    const rel_index = i - theme_index;\n                    const index = rel_index < 0 ? mod(rel_index, n) : rel_index;\n                    theme_classes[index] = draft.theme_classes[i];\n                    if (i === draft.previous) {\n                        draft.previous = index;\n                    }\n                }\n\n                // Update state with reordered theme classes and reset current theme index\n                draft.theme_classes = theme_classes;\n                draft.current = 0;\n                break;\n            }\n            /**\n             * Set a boolean flag to indicate whether a persisted data has been loaded or not\n             */\n            case \"FLAG_PERSISTED_DATA_LOAD\": {\n                draft.loaded_persisted_data = action.payload;\n                break;\n            }\n        }\n\n        return draft;\n    });\n}\n\nexport default themeClassContextReducer;\n","/**\n * @file ThemeClassContextProvider.tsx\n * @description Provider component for managing theme class context.\n */\n\nimport React, {\n    FC,\n    PropsWithChildren,\n    useEffect,\n    useMemo,\n    useReducer,\n} from \"react\";\nimport ThemeClassContext from \"./ThemeClassContext\";\nimport {\n    IPersistanceConfiguration,\n    IPersistanceConfigurationProp,\n    IThemeChangeSideEffect,\n    IThemeClassContext,\n    IThemeClassState,\n    IThemePersistantDTO,\n} from \"./theme-class-provider.types\";\nimport themeClassContextReducer from \"./themeClassContextReducer\";\nimport {\n    clearPersistedThemeData,\n    getPersistedThemeData,\n    setPersistedThemeData,\n    updateThemeClassOfDocumentElement,\n} from \"./utils\";\n\n/**\n * Props for the ThemeClassContextProvider component.\n */\ninterface PropType extends PropsWithChildren {\n    /** List of theme classes */\n    themeClasses: string[];\n    /** Configuration for persistance */\n    persist?: IPersistanceConfigurationProp;\n    /** On Theme changed  */\n    onChange?: IThemeChangeSideEffect;\n    /** set the default theme from the themeClasses, can be used to set default theme conditionaly*/\n    defaultTheme?: string | null;\n}\n\n/**\n * Default configuration for persistance.\n */\nconst default_persistance_config: IPersistanceConfiguration = {\n    key: \"theme-data\",\n    disabled: false,\n    clearOnUnload: false,\n};\n\n/**\n * ThemeClassContextProvider component.\n * Manages the theme class context and provides it to child components.\n */\nconst ThemeClassContextProvider: FC<PropType> = ({\n    themeClasses,\n    children,\n    persist,\n    onChange,\n    defaultTheme,\n}) => {\n    // Merge provided persistence configuration with default configuration\n    const persist_config = { ...default_persistance_config, ...persist };\n\n    // Check for empty theme-classes array\n    if (themeClasses.length === 0) {\n        throw new Error(\"Value Error: Theme-classes list must not be empty\");\n    }\n\n    // Initial theme state\n    const initial_state: IThemeClassState = {\n        previous: null,\n        current: 0,\n        is_loading: true,\n        theme_classes: themeClasses,\n        error: null,\n        loaded_persisted_data: false,\n    };\n\n    // Reducer to manage theme class context state\n    const [state, dispatch] = useReducer(\n        themeClassContextReducer,\n        initial_state\n    );\n\n    // Memoized persisted theme data\n    const persistedThemeData = useMemo(\n        () => ({\n            current: state.current,\n            theme_classes: state.theme_classes,\n        }),\n        [state.current, state.theme_classes]\n    );\n\n    // Memoized persisted theme key\n    const persistedThemeKey = useMemo(\n        () => persist_config.key,\n        [persist_config.key]\n    );\n\n    // Load persisted theme data on component mount\n    const loadState = (theme_dto: IThemePersistantDTO) => {\n        dispatch({ type: \"LOAD_STATE\", payload: theme_dto });\n    };\n\n    // Set the persisted-data-loaded flag\n    const setPersistedDataLoadedFlag = (flag: boolean) => {\n        dispatch({ type: \"FLAG_PERSISTED_DATA_LOAD\", payload: flag });\n    };\n\n    // Set is_loading state\n    const setLoadingState = (flag: boolean) => {\n        dispatch({ type: \"SET_LOADING_STATE\", payload: flag });\n    };\n\n    // Set a given theme as default\n    const setDefault = (theme_class: string) => {\n        dispatch({ type: \"SET_DEFAULT\", payload: theme_class });\n    };\n\n    // on load\n    useEffect(() => {\n        const { key } = persist_config;\n        const theme_data = getPersistedThemeData(key);\n\n        if (theme_data) {\n            loadState(theme_data);\n            setPersistedDataLoadedFlag(true);\n        } else if (defaultTheme != null) {\n            setDefault(defaultTheme);\n        }\n\n        // Set Loading state to false\n        setLoadingState(false);\n\n        return () => {\n            if (persist_config.clearOnUnload || persist_config.disabled) {\n                clearPersistedThemeData(key);\n            }\n        };\n    }, []);\n\n    // Update persisted theme data on theme or theme classes change\n    useEffect(() => {\n        if (state.is_loading || persist_config.disabled) {\n            return;\n        }\n        setPersistedThemeData(persistedThemeKey, persistedThemeData);\n        if (onChange) {\n            onChange(state.current, state.previous, state.theme_classes);\n        }\n    }, [state]);\n\n    // Theme class context value\n    const value: IThemeClassContext = {\n        is_loading: state.is_loading,\n        error: state.error,\n        loaded_persisted_data: state.loaded_persisted_data,\n        setCurrentTheme: (theme_class: string) => {\n            dispatch({ type: \"SET_CURRENT_THEME_CLASS\", payload: theme_class });\n        },\n        getCurrentTheme: () => {\n            return state.theme_classes[state.current];\n        },\n        toggleTheme: () => {\n            dispatch({ type: \"TOGGLE_THEME\", payload: undefined });\n        },\n        setThemeClasses: (classes: string[]) => {\n            dispatch({ type: \"SET_THEME_CLASSES\", payload: classes });\n        },\n        getThemeClasses: () => state.theme_classes,\n        loadState,\n        clearPersistedThemeData: () => {\n            clearPersistedThemeData(persist_config.key);\n        },\n        setDefault,\n    };\n\n    // Render the context provider\n    return (\n        <ThemeClassContext.Provider value={value}>\n            {children}\n        </ThemeClassContext.Provider>\n    );\n};\n\n// Define default props\nThemeClassContextProvider.defaultProps = {\n    persist: {},\n    defaultTheme: null,\n    onChange: updateThemeClassOfDocumentElement,\n};\n\nexport default ThemeClassContextProvider;\n","/**\n * @file useThemeClassContext.ts\n * @description React hook for accessing the theme class context\n */\n\nimport { useContext } from \"react\";\nimport ThemeClassContext from \"./ThemeClassContext\";\n\n/**\n * A custom hook for accessing the theme class context.\n * @returns The theme class context.\n * @throws An error if the theme class context is null.\n */\nconst useThemeClassContext = () => {\n    const context = useContext(ThemeClassContext);\n    if (!context)\n        throw new Error(\n            \"Error: Theme-class-context is null. Make sure the you are using the ThemeClassProvider correctly.\"\n        );\n    return context;\n};\n\nexport default useThemeClassContext;\n"],"names":["ThemeClassContext","createContext","isThemeClassList","arg","Array","isArray","every","class_value","isThemePersistantDTO","theme_classes","max","isValidCurrentThemeIndex","current","length","clearPersistedThemeData","key","localStorage","removeItem","error","console","mod","n","m","themeClassContextReducer","state","action","produce","draft","type","payload","undefined","isValidPayload","err","Error","action_type","is_loading","previous","theme_index","indexOf","n_themes","next_theme","i","rel_index","index","loaded_persisted_data","default_persistance_config","disabled","clearOnUnload","ThemeClassContextProvider","themeClasses","children","persist","onChange","defaultTheme","persist_config","initial_state","dispatch","useReducer","persistedThemeData","useMemo","persistedThemeKey","loadState","theme_dto","setDefault","theme_class","useEffect","theme_data","serializedData","getItem","data","JSON","parse","getPersistedThemeData","flag","setLoadingState","value","setItem","stringify","setPersistedThemeData","setCurrentTheme","getCurrentTheme","toggleTheme","setThemeClasses","classes","getThemeClasses","React","createElement","Provider","defaultProps","previous_class","document","documentElement","classList","remove","current_class","add","useThemeClassContext","context","useContext"],"mappings":"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"}